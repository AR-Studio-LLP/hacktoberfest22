/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> slicing(vector<int>& arr,
                    int X, int Y)
{
    auto start = arr.begin() + X;
    auto end = arr.begin() + Y + 1;
    vector<int> result(Y - X + 1);
    copy(start, end, result.begin());
    return result;
}
    void temp(TreeNode* root,int targetSum,vector<vector<int>>& result,vector<int> & v,int pathLength){
        
        if(root == NULL){
            return;
        }
        if(v.size()<=pathLength){
            v.push_back(root->val);
        }else{
            v[pathLength] = root->val;
        }
        
        pathLength++;
        
        if(root->left == NULL && root->right == NULL && targetSum - root->val == 0){
            vector<int> ans = slicing(v,0,pathLength-1);
            result.push_back(ans);
        }else{
            temp(root->left,targetSum-root->val,result,v,pathLength);
            temp(root->right,targetSum-root->val,result,v,pathLength);
        }
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> result;
        vector<int> v;
        temp(root,targetSum,result,v,0);
        return result;
    }
    
};
